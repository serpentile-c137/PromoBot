# %%
import gradio as gr
import google.auth
from googleapiclient.discovery import build
from dotenv import load_dotenv
import google.generativeai
import os
import pandas as pd

# %%
load_dotenv()

os.environ['GOOGLE_API_KEY'] = os.getenv('GOOGLE_API_KEY')

# %%
google.generativeai.configure()

# %%
system_message = "You are an assistant that creates blog posts."
user_prompt = f"Generate an interesting blog post about."

# %%
prompts = [
    {"role": "system", "content": system_message},
    {"role": "user", "content": user_prompt}
  ]

# %%
def generate_content(preferences):
    system_message = "You are an assistant that creates blog posts."
    user_prompt = f"Generate an interesting blog post about {preferences}."
    gemini = google.generativeai.GenerativeModel(
        model_name='gemini-1.5-flash',
        # temprature=0.5,
        # max_tokens=100,
        system_instruction=f"Generate an interesting blog post about {preferences}."
    )
    response = gemini.generate_content(user_prompt, safety_settings=[
        {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"}], stream=True)
    result = ""
    for chunk in response:
        result += chunk.text
        yield result
    

# %%
interface = gr.Interface(
    fn=generate_content,
    inputs=gr.Textbox(label="Enter your preferences (e.g., sports, technology)"),
    # outputs=[gr.Markdown(label="Response:")],
    outputs=gr.Markdown(label="Generated Content"),
    title="Personalized Content Generator",
    description="Enter your preferences to get personalized content suggestions generated by Google Gemini."
)


# %%
products = pd.read_csv('products.csv')

# %%
products = products.to_dict(orient='records')

# %%
products

# %%
def recommend_products(category):
    prompt = f"Recommend products related to {category}."
    
    gemini = google.generativeai.GenerativeModel(
        model_name='gemini-1.5-flash',
        system_instruction="You are a virtual assistant that recommends products to customers."
    )
    response = gemini.generate_content(prompt, safety_settings=[
        {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"}], stream=True)
    result = ""
    for chunk in response:
        result += chunk.text
        yield result
    

# %%
import google.generativeai

def generate_email(customer_name, product_name):
    gemini = google.generativeai.GenerativeModel(
        model_name='gemini-1.5-flash',
        system_instruction="You are a virtual assistant that recommends products to customers.\n Give a good amount of discount to the customer to make them buy the product."
    )
    prompt = f"Write a friendly and persuasive email to {customer_name} recommending a {product_name}. The tone should be casual and enthusiastic."
    response = gemini.generate_content(prompt, safety_settings=[
        {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"}], stream=True)
    result = ""
    for chunk in response:
        result += chunk.text
        yield result

# %%
def chatbot_response(user_input):
    gemini = google.generativeai.GenerativeModel(
        model_name='gemini-1.5-flash',
        system_instruction='''
        You are a helpful and friendly marketing assistant. Your task is to engage users in a conversational manner, provide personalized product recommendations, generate creative marketing content (like blog posts, product descriptions, or emails), and assist with customer queries. 

        Your responses should be:
        1. Personalized: Address the user's preferences or queries based on the context they provide. For example, if a user mentions a particular interest like "fitness", recommend products or content related to fitness.
        2. Professional and Friendly*: Maintain a helpful, polite, and friendly tone throughout the conversation. Avoid being overly formal, but be respectful.
        3. Clear and Concise: Provide information in an easy-to-understand manner, avoiding jargon unless it’s relevant to the topic.
        4. Contextually Relevant: Respond according to the user’s input. If they ask about a specific product category, provide appropriate suggestions or content. If the user is looking for a marketing email or blog post, generate those according to the provided details.
        5. Engaging and Persuasive: When suggesting products or creating marketing emails, be persuasive without being too aggressive. Highlight the benefits and features in an enthusiastic but genuine way.
        6. Adaptable: If the user seems unsure or confused, provide further clarification or ask more detailed questions to understand their needs.

        If the user asks about products, provide a list of items that are tailored to their interests. If the user wants content, generate blog posts or articles that would appeal to their target audience. If the user requests an email, generate a friendly and persuasive marketing email.

        Keep in mind that the goal is to enhance customer satisfaction through personalization and helpful responses. Keep responses concise, clear, and focused on meeting the user's needs.

        ---

        Example: 
        - If a user says: "I'm interested in electronics," respond with:
        "Great! Are you looking for a specific type of product like smartphones, laptops, or accessories? I can suggest some popular products based on your preferences!"

        - If a user asks: "Can you write a marketing email for my product?" respond with:
        "Sure! Please provide the customer’s name and the product you would like to promote, and I will craft a personalized email for you."
        '''
    )

    prompt = f"User asked: {user_input}. Provide a friendly and engaging response for personalized marketing, product recommendations, or email creation."
    
    try:
        responses = gemini.generate_content(prompt, stream=True)
        
        result = ""
        for chunk in responses:
                result += chunk.text
        yield result
    except Exception as e:
        print(f"Error generating content: {e}")

# %%
model = google.generativeai.GenerativeModel('gemini-1.5-flash')
chat = model.start_chat(history=[])

# %%
def transform_history(history):
    new_history = []
    for chat in history:
        new_history.append({"parts": [{"text": chat[0]}], "role": "user"})
        new_history.append({"parts": [{"text": chat[1]}], "role": "model"})
    return new_history

# %%
import time
def response(message, history):
    global chat
    chat.history = transform_history(history)
    response = chat.send_message(message)
    response.resolve()

    # Each character of the answer is displayed
    for i in range(len(response.text)):
        time.sleep(0.01)
        yield response.text[: i+1]

# %%
# Set up the Gradio interface for the chatbot
def start_app():
    with gr.Blocks() as app:
        gr.Markdown("### Promo Bot: AI Marketing Assistant")
        
        with gr.Tab("Chatbot Interaction"):
            # chatbot_input = gr.Textbox(placeholder="Ask me about product recommendations or content...", label="Chat with Assistant")
            # chatbot_output = gr.Textbox(label="Chatbot Response")
            gr.ChatInterface(response, type="messages")
            # chatbot_input.submit(chatbot_response, inputs=chatbot_input, outputs=chatbot_output)
        
        with gr.Tab("Blog Post Generator"):
            blog_topic_input = gr.Textbox(placeholder="Enter topic for the blog", label="Blog Topic")
            blog_output = gr.Markdown(label="Generated Blog Post")
            # blog_topic_input.submit(generate_content, inputs=blog_topic_input, outputs=blog_output)
            btn = gr.Button(value="submit")
            btn.click(generate_content, inputs=blog_topic_input, outputs=blog_output)

        

        with gr.Tab("Product Recommendations"):
            product_input = gr.Textbox(placeholder="Enter category (e.g., electronics, fitness)", label="Product Category")
            # product_output = gr.Textbox(label="Recommended Products")
            product_output = gr.Markdown(label="Recommended Products")
            
            # product_input.submit(recommend_products, inputs=product_input, outputs=product_output)
            btn = gr.Button(value="submit")
            btn.click(recommend_products, inputs=product_input, outputs=product_output)

        
        with gr.Tab("Marketing Email Generator"):
            customer_name_input = gr.Textbox(placeholder="Enter customer name", label="Customer Name")
            product_name_input = gr.Textbox(placeholder="Enter product name", label="Product Name")
            # email_output = gr.Textbox(label="Generated Marketing Email")
            email_output = gr.Markdown(label="Generated Marketing Email")
            
            customer_name_input.submit(generate_email, inputs=[customer_name_input, product_name_input], outputs=email_output)
            product_name_input.submit(generate_email, inputs=[customer_name_input, product_name_input], outputs=email_output)

        
    app.launch()

# Start the Gradio chatbot interface
start_app()

# %%
